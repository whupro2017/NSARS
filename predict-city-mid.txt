#PCL implementation of SEIR for CDC@SZ
#Authors: WH Li, XY Wei
#Jan 27, 2020

#remove (list = objects() )
library (deSolve)

offset=1
detail=1
uppers=500
limits=60

dev.new(width=7.5,height=3.75,pointsize=8)
#par(new=TRUE)
if (1) {
	#model = c(1, 1.0, 0.4, 0.4, 0.2, 0.6, 0.6, 0.8, 0.9)
	model = c(1, 1.0, 0.45, 0.3, 0.325, -0.115, -0.175, 0, 0.1, 0, 0, 0)
	cityname="Beijing"
	expected=1000
	offset=1
}
if (1) {
	model = c(1, 1.0, 0.65, 0.45, -0.2, -0.02, -0.06, -0.04, 0, 0, 0, 0)#0.5, 0.8, 0.9)
	cityname="Shanghai"
	expected=1000
	offset=2
}
if (0) {
	#model = c(1, 1.0, 0.4, 0.5, 0.2, 0.2, 0.2, 0.2, 0.1)
	#model = c(1, 1.0, 0.5, 0.5, -0.08, 0, 0, 0, 0)
	model = c(1, 1.0, 0.4, 0.85, -0.17, -0.095, -0.01, 0, 0.0, 0.0, 0.0, 0.0)
	cityname="Guangzhou"
	expected=1100
	offset=1
}
if (0) {
	#model = c(1, 1, 0.5, 0.5, 0.2, 0.6, 0.6, 0.8, 0.9)
	#model = c(1, 1, 1, 0.55, 0.3, 0.2, 0.2, 0.1, 0)
	model = c(1, 1, 0.4, 1.56, -0.085, -0.175, 0.4 -0.17, -0.1, 0.1, 0, 0)
	cityname="Shenzhen"
	expected=1000
	offset=0
}
if (0) {
	model = c(1, 1, -0.05, 0.65, -0.15, 0.0, 0.05, 0.05, 0.1, 0.1, 0.1, 0.1)
	cityname="Tianjing"
	expected=195
	offset=7
}
if (0) {
	model = c(1, 1.0, 0.8, 0.2, 0, 0, 0, 0, 0, 0)#0.5, 0.8, 0.9)
	cityname="Chongqing"
	expected=4650
	offset=0
}
if (0) {
	model = c(1, 1, 0.45, 0.35, 0.3, 0.3, 0.3, 0.3, 0.3, 0.6, 0.6)
	cityname="Zhengzhou"
	expected=220
	offset=4
	cityname="Chengdu"
	expected=180
	offset=2
}
if (0) {
	model = c(1, 1, 0.9, 0.7, 0, 0, 0, 0)
	cityname="Hangzhou"
	expected=265
	offset=1
}

#the function for SEIR
seir_model = function (current_timepoint, state_values, parameters)
{
  # create state variables (local variables)
  S = state_values [1]        # susceptibles
  E = state_values [2]        # exposed
  I = state_values [3]        # infectious
  R = state_values [4]        # recovered
  
  with ( 
    as.list (parameters),     # variable names within parameters can be used 
    {
      # compute derivatives
      dS = (-beta * S * I)
      dE = (beta * S * I) - (delta * E)
      dI = (delta * E) - (gamma * I)
      dR = (gamma * I)
      
      # combine results
      results = c (dS, dE, dI, dR)
      list (results)
    }
  )
}


#set parameters
contact_rate = 5                     # number of contacts per day
transmission_probability = 0.035       # transmission probability
infectious_period = 14                # infectious period
latent_period = 10                    # latent period

beta_value =  contact_rate * transmission_probability
#beta_value = 0.8
gamma_value = 1 / infectious_period
delta_value = 1 / latent_period
Ro = beta_value / gamma_value

parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)

#Set initial S,E,I,R values
W = expected        # susceptible hosts
X = 1           # infectious hosts
Y = 0            # recovered hosts
Z = 2           # exposed hosts

N = W + X + Y + Z

initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)
	
timepoints = seq (0, 1, by=1)

output <- c(time=0, initial_values)

adj = 0

for (i in 1:200) {
	if (i <= 13 ) {
		beta_value = model[1] - adj
	} else if (i <= 27 ) {
		beta_value = model[2] - adj
	} else if (i <= 30) {
		beta_value = model[3] - adj
	} else if (i <= 32) {
		beta_value = model[4] - adj
	} else if (i <= 36) {
		beta_value = model[5] - adj
	} else if (i <= 42) {  
		beta_value = model[6] - adj
	} else if (i <= 45) {  
		beta_value = model[7] - adj
	} else if (i <= 50) {  
		beta_value = model[8] - adj
	} else if (i <= 62) {  
		beta_value = model[9] - adj
	} else if (i <= 77) {  
		beta_value = model[10] - adj
	} else if (i <= 112) { 
		beta_value = model[11] - adj
	} else {
		beta_value = model[12] - adj
	}
	parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)
	stage = lsoda (initial_values, timepoints, seir_model, parameter_list)
	initial_values = stage[c(4,6,8,10)]
    output <- rbind(output, c(time=i, initial_values))
}

if (detail) {
	plot(output[0:(200 - offset),c("I")] * N + output[0:(200 - offset),c("R")] * N ~ output[(offset + 1):200,c("time")], xlim = c(0,limits), ylim = c(0,uppers), col='red', type='p', main = cityname) #expected * .35
	par (new = TRUE)                             
	plot (city[0:length(city[,c(cityname)]),c(cityname)] ~ city[0:length(city[,c(cityname)]),c("Time")], type='o',xlim = c(0,limits), ylim = c(0, uppers))#expected * .35
} else {
	scale = 1.2

	# plot (I * N ~ time, data = output, type='b', col = 'blue', ylab = 'Infectious', main = 'Wuhan infectious')

	# susceptible hosts over time plot (S * N ~ time, data = output, type='l', col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic') 
	plot (S * N ~ time, data = output, type='l', ylim = c(0,W * 1.2), col = 'blue', ylab = 'S, E, I, R', main = cityname) 
	# remain on same frame
	par (new = TRUE)    
	# exposed hosts over time
	plot (E * N ~ time, data = output, type='l', ylim = c(0,W * 1.2), col = 'pink', ylab = '', axes = FALSE)
	# remain on same frame
	par (new = TRUE) 
	# infectious hosts over time
	plot (I * N ~ time, data = output, type='l', ylim = c(0,W * 1.2), col = 'red', ylab = '', axes = FALSE) 
	# remain on same frame
	par (new = TRUE)  
	# recovered hosts over time
	plot (R * N ~ time, data = output, type='l', ylim = c(0,W * 1.2), col = 'green', ylab = '', axes = FALSE)
	par (new = TRUE)                                              
	# recovered hosts over time                                   
	plot (city[,c(cityname)] ~ city[,c("Time")], type='o',xlim = c(0,200), ylim = c(0,W * 1.2))
	# remain on same frame
	par (new = TRUE) 
	legend(x=150,y=W,legend=c("Susceptible","Exposed","Infectious","Recovered","Actural"),col=c("blue","pink","red","green","black"), lty=1, cex=0.8)
}